type {{ toPascalCase .Type.Name }} struct {
{{ range $k, $v := .Type.Fields -}}
  {{ toPascalCase $k }} {{ toType $v }}
{{ end }}
}

func (x {{ toPascalCase .Type.Name }}) ToValue() any {
  return map[string]any{
  {{ range $k, $v := .Type.Fields -}}
    "{{ $k }}": {{ toTypeFunc $v }}(x.{{ toPascalCase $k }}),
  {{ end }}
  }
}

func Parse{{ toPascalCase .Type.Name }}(v any) ({{ toPascalCase .Type.Name }}, error) {
  {{ $length := len .Type.Fields }} {{ if gt $length 0 -}}
  m, err := sdk.Map[any](v)
  if err != nil {
    return {{ toPascalCase .Type.Name }}{}, fmt.Errorf("error parsing {{ .Type.Name }}: %v", err)
  }
  {{ end }}

  {{ range $k, $v := .Type.Fields -}}
  {{ $k }}, err := {{ parseFieldFunc $v }}(m["{{ $k }}"])
  if err != nil {
    return {{ toPascalCase $.Type.Name }}{}, fmt.Errorf("error parsing {{ $.Type.Name }} for {{ $.ResourceName }}: %v", err)
  }
  {{ end }}

  return {{ toPascalCase .Type.Name }}{
  {{ range $k, $v := .Type.Fields -}}
    {{ toPascalCase $k }}: {{ $k }},
  {{ end }}
  }, nil
}
