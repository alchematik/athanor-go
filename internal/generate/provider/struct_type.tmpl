type {{ toPascalCase .Type.Name }} struct {
{{ range .Type.Fields -}}
  {{ toPascalCase .Name }} {{ toType . }}
{{ end }}
}

{{ if .Type.IsIdentifier }}
func (x {{ toPascalCase .Type.Name }}) ToValue() sdk.Identifier {
  return sdk.Identifier{
    ResourceType: "{{ .ResourceName }}",
    Value: map[string]any{
  {{ range .Type.Fields -}}
    "{{ .Name }}": sdk.ToType(x.{{ toPascalCase .Name }}),
  {{ end }}
    },
  }
}

func (x {{ toPascalCase .Type.Name }}) ResourceType() string {
  return "{{ .ResourceName }}"
}
{{ else }}
func (x {{ toPascalCase .Type.Name }}) ToValue() any {
  return map[string]any{
  {{ range .Type.Fields -}}
    "{{ .Name }}": sdk.ToType(x.{{ toPascalCase .Name }}),
  {{ end }}
  }
}
{{ end }}

{{ if .Type.IsIdentifier }}
func Parse{{ toPascalCase .Type.Name }}(v sdk.Identifier) ({{ toPascalCase .Type.Name }}, error) {
  {{ $length := len .Type.Fields }} {{ if gt $length 0 }}
  m, err := sdk.Map(v.Value)
  if err != nil {
    return {{ toPascalCase .Type.Name }}{}, nil
  }
  {{ end }}

  {{ range .Type.Fields -}}
  {{ .Name }}, err := {{ parseFieldFunc . }}(m["{{ .Name }}"])
  if err != nil {
    return {{ toPascalCase $.Type.Name }}{}, nil
  }
  {{ end }}

  return {{ toPascalCase .Type.Name }}{
  {{ range .Type.Fields -}}
    {{ toPascalCase .Name }}: {{ .Name }},
  {{ end }}
  }, nil
}
{{ else }}
func Parse{{ toPascalCase .Type.Name }}(v any) ({{ toPascalCase .Type.Name }}, error) {
  {{ $length := len .Type.Fields }} {{ if gt $length 0 }}
  m, err := sdk.Map(v)
  if err != nil {
    return {{ toPascalCase .Type.Name }}{}, nil
  }
  {{ end }}

  {{ range .Type.Fields -}}
  {{ .Name }}, err := {{ parseFieldFunc . }}(m["{{ .Name }}"])
  if err != nil {
    return {{ toPascalCase $.Type.Name }}{}, nil
  }
  {{ end }}

  return {{ toPascalCase .Type.Name }}{
  {{ range .Type.Fields -}}
    {{ toPascalCase .Name }}: {{ .Name }},
  {{ end }}
  }, nil
}
{{ end }}
