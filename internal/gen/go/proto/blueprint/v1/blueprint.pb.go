// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: blueprint/v1/blueprint.proto

package blueprintv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Blueprint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stmts []*Stmt `protobuf:"bytes,1,rep,name=stmts,proto3" json:"stmts,omitempty"`
}

func (x *Blueprint) Reset() {
	*x = Blueprint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blueprint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blueprint) ProtoMessage() {}

func (x *Blueprint) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blueprint.ProtoReflect.Descriptor instead.
func (*Blueprint) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{0}
}

func (x *Blueprint) GetStmts() []*Stmt {
	if x != nil {
		return x.Stmts
	}
	return nil
}

type Stmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Stmt_Provider
	//	*Stmt_Resource
	//	*Stmt_Build
	Type isStmt_Type `protobuf_oneof:"type"`
}

func (x *Stmt) Reset() {
	*x = Stmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stmt) ProtoMessage() {}

func (x *Stmt) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stmt.ProtoReflect.Descriptor instead.
func (*Stmt) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{1}
}

func (m *Stmt) GetType() isStmt_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Stmt) GetProvider() *ProviderStmt {
	if x, ok := x.GetType().(*Stmt_Provider); ok {
		return x.Provider
	}
	return nil
}

func (x *Stmt) GetResource() *ResourceStmt {
	if x, ok := x.GetType().(*Stmt_Resource); ok {
		return x.Resource
	}
	return nil
}

func (x *Stmt) GetBuild() *BuildStmt {
	if x, ok := x.GetType().(*Stmt_Build); ok {
		return x.Build
	}
	return nil
}

type isStmt_Type interface {
	isStmt_Type()
}

type Stmt_Provider struct {
	Provider *ProviderStmt `protobuf:"bytes,1,opt,name=provider,proto3,oneof"`
}

type Stmt_Resource struct {
	Resource *ResourceStmt `protobuf:"bytes,2,opt,name=resource,proto3,oneof"`
}

type Stmt_Build struct {
	// BlueprintStmt blueprint = 3;
	Build *BuildStmt `protobuf:"bytes,4,opt,name=build,proto3,oneof"`
}

func (*Stmt_Provider) isStmt_Type() {}

func (*Stmt_Resource) isStmt_Type() {}

func (*Stmt_Build) isStmt_Type() {}

type ProviderStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *Expr `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *ProviderStmt) Reset() {
	*x = ProviderStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderStmt) ProtoMessage() {}

func (x *ProviderStmt) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderStmt.ProtoReflect.Descriptor instead.
func (*ProviderStmt) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{2}
}

func (x *ProviderStmt) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type ResourceStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *Expr `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *ResourceStmt) Reset() {
	*x = ResourceStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStmt) ProtoMessage() {}

func (x *ResourceStmt) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStmt.ProtoReflect.Descriptor instead.
func (*ResourceStmt) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceStmt) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type BuildStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias     string           `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	Inputs    map[string]*Expr `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Blueprint *Expr            `protobuf:"bytes,3,opt,name=blueprint,proto3" json:"blueprint,omitempty"`
}

func (x *BuildStmt) Reset() {
	*x = BuildStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildStmt) ProtoMessage() {}

func (x *BuildStmt) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildStmt.ProtoReflect.Descriptor instead.
func (*BuildStmt) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{4}
}

func (x *BuildStmt) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *BuildStmt) GetInputs() map[string]*Expr {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *BuildStmt) GetBlueprint() *Expr {
	if x != nil {
		return x.Blueprint
	}
	return nil
}

type Expr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Expr_StringLiteral
	//	*Expr_IntLiteral
	//	*Expr_FloatLiteral
	//	*Expr_BoolLiteral
	//	*Expr_List
	//	*Expr_Map
	//	*Expr_Get
	//	*Expr_Provider
	//	*Expr_Resource
	//	*Expr_GetProvider_
	//	*Expr_GetResource_
	//	*Expr_Nil
	//	*Expr_IoGet
	//	*Expr_ProviderIdentifier
	//	*Expr_ResourceIdentifier
	//	*Expr_Blueprint
	Type isExpr_Type `protobuf_oneof:"type"`
}

func (x *Expr) Reset() {
	*x = Expr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{5}
}

func (m *Expr) GetType() isExpr_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Expr) GetStringLiteral() string {
	if x, ok := x.GetType().(*Expr_StringLiteral); ok {
		return x.StringLiteral
	}
	return ""
}

func (x *Expr) GetIntLiteral() uint32 {
	if x, ok := x.GetType().(*Expr_IntLiteral); ok {
		return x.IntLiteral
	}
	return 0
}

func (x *Expr) GetFloatLiteral() float32 {
	if x, ok := x.GetType().(*Expr_FloatLiteral); ok {
		return x.FloatLiteral
	}
	return 0
}

func (x *Expr) GetBoolLiteral() bool {
	if x, ok := x.GetType().(*Expr_BoolLiteral); ok {
		return x.BoolLiteral
	}
	return false
}

func (x *Expr) GetList() *ListExpr {
	if x, ok := x.GetType().(*Expr_List); ok {
		return x.List
	}
	return nil
}

func (x *Expr) GetMap() *MapExpr {
	if x, ok := x.GetType().(*Expr_Map); ok {
		return x.Map
	}
	return nil
}

func (x *Expr) GetGet() *GetExpr {
	if x, ok := x.GetType().(*Expr_Get); ok {
		return x.Get
	}
	return nil
}

func (x *Expr) GetProvider() *ProviderExpr {
	if x, ok := x.GetType().(*Expr_Provider); ok {
		return x.Provider
	}
	return nil
}

func (x *Expr) GetResource() *ResourceExpr {
	if x, ok := x.GetType().(*Expr_Resource); ok {
		return x.Resource
	}
	return nil
}

func (x *Expr) GetGetProvider_() *GetProviderExpr {
	if x, ok := x.GetType().(*Expr_GetProvider_); ok {
		return x.GetProvider_
	}
	return nil
}

func (x *Expr) GetGetResource_() *GetResourceExpr {
	if x, ok := x.GetType().(*Expr_GetResource_); ok {
		return x.GetResource_
	}
	return nil
}

func (x *Expr) GetNil() *NilExpr {
	if x, ok := x.GetType().(*Expr_Nil); ok {
		return x.Nil
	}
	return nil
}

func (x *Expr) GetIoGet() *IOGetExpr {
	if x, ok := x.GetType().(*Expr_IoGet); ok {
		return x.IoGet
	}
	return nil
}

func (x *Expr) GetProviderIdentifier() *ProviderIdentifierExpr {
	if x, ok := x.GetType().(*Expr_ProviderIdentifier); ok {
		return x.ProviderIdentifier
	}
	return nil
}

func (x *Expr) GetResourceIdentifier() *ResourceIdentifierExpr {
	if x, ok := x.GetType().(*Expr_ResourceIdentifier); ok {
		return x.ResourceIdentifier
	}
	return nil
}

func (x *Expr) GetBlueprint() *BlueprintExpr {
	if x, ok := x.GetType().(*Expr_Blueprint); ok {
		return x.Blueprint
	}
	return nil
}

type isExpr_Type interface {
	isExpr_Type()
}

type Expr_StringLiteral struct {
	StringLiteral string `protobuf:"bytes,1,opt,name=string_literal,json=stringLiteral,proto3,oneof"`
}

type Expr_IntLiteral struct {
	IntLiteral uint32 `protobuf:"varint,2,opt,name=int_literal,json=intLiteral,proto3,oneof"`
}

type Expr_FloatLiteral struct {
	FloatLiteral float32 `protobuf:"fixed32,3,opt,name=float_literal,json=floatLiteral,proto3,oneof"`
}

type Expr_BoolLiteral struct {
	BoolLiteral bool `protobuf:"varint,4,opt,name=bool_literal,json=boolLiteral,proto3,oneof"`
}

type Expr_List struct {
	List *ListExpr `protobuf:"bytes,5,opt,name=list,proto3,oneof"`
}

type Expr_Map struct {
	Map *MapExpr `protobuf:"bytes,6,opt,name=map,proto3,oneof"`
}

type Expr_Get struct {
	Get *GetExpr `protobuf:"bytes,7,opt,name=get,proto3,oneof"`
}

type Expr_Provider struct {
	Provider *ProviderExpr `protobuf:"bytes,8,opt,name=provider,proto3,oneof"`
}

type Expr_Resource struct {
	Resource *ResourceExpr `protobuf:"bytes,9,opt,name=resource,proto3,oneof"`
}

type Expr_GetProvider_ struct {
	GetProvider_ *GetProviderExpr `protobuf:"bytes,10,opt,name=get_provider,json=getProvider,proto3,oneof"`
}

type Expr_GetResource_ struct {
	GetResource_ *GetResourceExpr `protobuf:"bytes,11,opt,name=get_resource,json=getResource,proto3,oneof"`
}

type Expr_Nil struct {
	Nil *NilExpr `protobuf:"bytes,12,opt,name=nil,proto3,oneof"`
}

type Expr_IoGet struct {
	IoGet *IOGetExpr `protobuf:"bytes,13,opt,name=io_get,json=ioGet,proto3,oneof"`
}

type Expr_ProviderIdentifier struct {
	ProviderIdentifier *ProviderIdentifierExpr `protobuf:"bytes,14,opt,name=provider_identifier,json=providerIdentifier,proto3,oneof"`
}

type Expr_ResourceIdentifier struct {
	ResourceIdentifier *ResourceIdentifierExpr `protobuf:"bytes,15,opt,name=resource_identifier,json=resourceIdentifier,proto3,oneof"`
}

type Expr_Blueprint struct {
	Blueprint *BlueprintExpr `protobuf:"bytes,16,opt,name=blueprint,proto3,oneof"`
}

func (*Expr_StringLiteral) isExpr_Type() {}

func (*Expr_IntLiteral) isExpr_Type() {}

func (*Expr_FloatLiteral) isExpr_Type() {}

func (*Expr_BoolLiteral) isExpr_Type() {}

func (*Expr_List) isExpr_Type() {}

func (*Expr_Map) isExpr_Type() {}

func (*Expr_Get) isExpr_Type() {}

func (*Expr_Provider) isExpr_Type() {}

func (*Expr_Resource) isExpr_Type() {}

func (*Expr_GetProvider_) isExpr_Type() {}

func (*Expr_GetResource_) isExpr_Type() {}

func (*Expr_Nil) isExpr_Type() {}

func (*Expr_IoGet) isExpr_Type() {}

func (*Expr_ProviderIdentifier) isExpr_Type() {}

func (*Expr_ResourceIdentifier) isExpr_Type() {}

func (*Expr_Blueprint) isExpr_Type() {}

type BlueprintExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stmts []*Stmt `protobuf:"bytes,1,rep,name=stmts,proto3" json:"stmts,omitempty"`
}

func (x *BlueprintExpr) Reset() {
	*x = BlueprintExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlueprintExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlueprintExpr) ProtoMessage() {}

func (x *BlueprintExpr) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlueprintExpr.ProtoReflect.Descriptor instead.
func (*BlueprintExpr) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{6}
}

func (x *BlueprintExpr) GetStmts() []*Stmt {
	if x != nil {
		return x.Stmts
	}
	return nil
}

type ListExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*Expr `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *ListExpr) Reset() {
	*x = ListExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExpr) ProtoMessage() {}

func (x *ListExpr) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExpr.ProtoReflect.Descriptor instead.
func (*ListExpr) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{7}
}

func (x *ListExpr) GetElements() []*Expr {
	if x != nil {
		return x.Elements
	}
	return nil
}

type MapExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries map[string]*Expr `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapExpr) Reset() {
	*x = MapExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapExpr) ProtoMessage() {}

func (x *MapExpr) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapExpr.ProtoReflect.Descriptor instead.
func (*MapExpr) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{8}
}

func (x *MapExpr) GetEntries() map[string]*Expr {
	if x != nil {
		return x.Entries
	}
	return nil
}

type GetExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Object *Expr  `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *GetExpr) Reset() {
	*x = GetExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExpr) ProtoMessage() {}

func (x *GetExpr) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExpr.ProtoReflect.Descriptor instead.
func (*GetExpr) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{9}
}

func (x *GetExpr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetExpr) GetObject() *Expr {
	if x != nil {
		return x.Object
	}
	return nil
}

type GetProviderExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *GetProviderExpr) Reset() {
	*x = GetProviderExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProviderExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProviderExpr) ProtoMessage() {}

func (x *GetProviderExpr) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProviderExpr.ProtoReflect.Descriptor instead.
func (*GetProviderExpr) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{10}
}

func (x *GetProviderExpr) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type GetResourceExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *GetResourceExpr) Reset() {
	*x = GetResourceExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceExpr) ProtoMessage() {}

func (x *GetResourceExpr) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceExpr.ProtoReflect.Descriptor instead.
func (*GetResourceExpr) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{11}
}

func (x *GetResourceExpr) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type IOGetExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Object *Expr  `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *IOGetExpr) Reset() {
	*x = IOGetExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOGetExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOGetExpr) ProtoMessage() {}

func (x *IOGetExpr) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOGetExpr.ProtoReflect.Descriptor instead.
func (*IOGetExpr) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{12}
}

func (x *IOGetExpr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IOGetExpr) GetObject() *Expr {
	if x != nil {
		return x.Object
	}
	return nil
}

type NilExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NilExpr) Reset() {
	*x = NilExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NilExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NilExpr) ProtoMessage() {}

func (x *NilExpr) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NilExpr.ProtoReflect.Descriptor instead.
func (*NilExpr) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{13}
}

type ProviderExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier *Expr `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *ProviderExpr) Reset() {
	*x = ProviderExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderExpr) ProtoMessage() {}

func (x *ProviderExpr) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderExpr.ProtoReflect.Descriptor instead.
func (*ProviderExpr) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{14}
}

func (x *ProviderExpr) GetIdentifier() *Expr {
	if x != nil {
		return x.Identifier
	}
	return nil
}

type ProviderIdentifierExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias   string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	Name    *Expr  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version *Expr  `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ProviderIdentifierExpr) Reset() {
	*x = ProviderIdentifierExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderIdentifierExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderIdentifierExpr) ProtoMessage() {}

func (x *ProviderIdentifierExpr) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderIdentifierExpr.ProtoReflect.Descriptor instead.
func (*ProviderIdentifierExpr) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{15}
}

func (x *ProviderIdentifierExpr) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *ProviderIdentifierExpr) GetName() *Expr {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ProviderIdentifierExpr) GetVersion() *Expr {
	if x != nil {
		return x.Version
	}
	return nil
}

type ResourceExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider   *Expr `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Identifier *Expr `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Config     *Expr `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	Exists     *Expr `protobuf:"bytes,4,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *ResourceExpr) Reset() {
	*x = ResourceExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceExpr) ProtoMessage() {}

func (x *ResourceExpr) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceExpr.ProtoReflect.Descriptor instead.
func (*ResourceExpr) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{16}
}

func (x *ResourceExpr) GetProvider() *Expr {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *ResourceExpr) GetIdentifier() *Expr {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ResourceExpr) GetConfig() *Expr {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ResourceExpr) GetExists() *Expr {
	if x != nil {
		return x.Exists
	}
	return nil
}

type ResourceIdentifierExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Value *Expr  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResourceIdentifierExpr) Reset() {
	*x = ResourceIdentifierExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blueprint_v1_blueprint_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceIdentifierExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceIdentifierExpr) ProtoMessage() {}

func (x *ResourceIdentifierExpr) ProtoReflect() protoreflect.Message {
	mi := &file_blueprint_v1_blueprint_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceIdentifierExpr.ProtoReflect.Descriptor instead.
func (*ResourceIdentifierExpr) Descriptor() ([]byte, []int) {
	return file_blueprint_v1_blueprint_proto_rawDescGZIP(), []int{17}
}

func (x *ResourceIdentifierExpr) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *ResourceIdentifierExpr) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResourceIdentifierExpr) GetValue() *Expr {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_blueprint_v1_blueprint_proto protoreflect.FileDescriptor

var file_blueprint_v1_blueprint_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f,
	0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e,
	0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x22,
	0x48, 0x0a, 0x09, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x05,
	0x73, 0x74, 0x6d, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6c,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x6d, 0x74, 0x52, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x04, 0x53, 0x74,
	0x6d, 0x74, 0x12, 0x4b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x4b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x6d, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x05,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6c,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x49, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x22, 0x49, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x6d, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x98,
	0x02, 0x0a, 0x09, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x4e, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x6d, 0x74, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x09, 0x62, 0x6c,
	0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x1a, 0x60, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x08, 0x0a, 0x04, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x25,
	0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x62,
	0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x03, 0x6d,
	0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x03, 0x67, 0x65, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72,
	0x48, 0x00, 0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6c, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x55, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61,
	0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x70, 0x72,
	0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x3c, 0x0a, 0x03, 0x6e, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f,
	0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x69, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x69, 0x6c, 0x12, 0x43, 0x0a,
	0x06, 0x69, 0x6f, 0x5f, 0x67, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e,
	0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x4f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6f, 0x47,
	0x65, 0x74, 0x12, 0x6a, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68,
	0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x6a,
	0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x6c,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x09, 0x62, 0x6c,
	0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e,
	0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52,
	0x09, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x4c, 0x0a, 0x0d, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x52, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73,
	0x22, 0x4d, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x41, 0x0a, 0x08,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61,
	0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xbd, 0x01, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x70, 0x72, 0x12, 0x4f, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61,
	0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f,
	0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x61, 0x0a, 0x0c,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e,
	0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x5c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61,
	0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x27, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x27, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22,
	0x5e, 0x0a, 0x09, 0x49, 0x4f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74,
	0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x09, 0x0a, 0x07, 0x4e, 0x69, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x22, 0x55, 0x0a, 0x0c, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61,
	0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0xaa, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74,
	0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61,
	0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x96,
	0x02, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x41, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6c, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x7f, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x70,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6c, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0xa5, 0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x74, 0x68, 0x61,
	0x6e, 0x6f, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x42, 0x0e, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6f,
	0x72, 0x2d, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x41, 0x42, 0xaa, 0x02, 0x1f, 0x41, 0x6c, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x2e, 0x41, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x42,
	0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1f, 0x41, 0x6c,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x5c, 0x41, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x72,
	0x5c, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x2b,
	0x41, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x5c, 0x41, 0x74, 0x68, 0x61, 0x6e,
	0x6f, 0x72, 0x5c, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x22, 0x41, 0x6c,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x6b, 0x3a, 0x3a, 0x41, 0x74, 0x68, 0x61, 0x6e, 0x6f,
	0x72, 0x3a, 0x3a, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blueprint_v1_blueprint_proto_rawDescOnce sync.Once
	file_blueprint_v1_blueprint_proto_rawDescData = file_blueprint_v1_blueprint_proto_rawDesc
)

func file_blueprint_v1_blueprint_proto_rawDescGZIP() []byte {
	file_blueprint_v1_blueprint_proto_rawDescOnce.Do(func() {
		file_blueprint_v1_blueprint_proto_rawDescData = protoimpl.X.CompressGZIP(file_blueprint_v1_blueprint_proto_rawDescData)
	})
	return file_blueprint_v1_blueprint_proto_rawDescData
}

var file_blueprint_v1_blueprint_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_blueprint_v1_blueprint_proto_goTypes = []interface{}{
	(*Blueprint)(nil),              // 0: alchematik.athanor.blueprint.v1.Blueprint
	(*Stmt)(nil),                   // 1: alchematik.athanor.blueprint.v1.Stmt
	(*ProviderStmt)(nil),           // 2: alchematik.athanor.blueprint.v1.ProviderStmt
	(*ResourceStmt)(nil),           // 3: alchematik.athanor.blueprint.v1.ResourceStmt
	(*BuildStmt)(nil),              // 4: alchematik.athanor.blueprint.v1.BuildStmt
	(*Expr)(nil),                   // 5: alchematik.athanor.blueprint.v1.Expr
	(*BlueprintExpr)(nil),          // 6: alchematik.athanor.blueprint.v1.BlueprintExpr
	(*ListExpr)(nil),               // 7: alchematik.athanor.blueprint.v1.ListExpr
	(*MapExpr)(nil),                // 8: alchematik.athanor.blueprint.v1.MapExpr
	(*GetExpr)(nil),                // 9: alchematik.athanor.blueprint.v1.GetExpr
	(*GetProviderExpr)(nil),        // 10: alchematik.athanor.blueprint.v1.GetProviderExpr
	(*GetResourceExpr)(nil),        // 11: alchematik.athanor.blueprint.v1.GetResourceExpr
	(*IOGetExpr)(nil),              // 12: alchematik.athanor.blueprint.v1.IOGetExpr
	(*NilExpr)(nil),                // 13: alchematik.athanor.blueprint.v1.NilExpr
	(*ProviderExpr)(nil),           // 14: alchematik.athanor.blueprint.v1.ProviderExpr
	(*ProviderIdentifierExpr)(nil), // 15: alchematik.athanor.blueprint.v1.ProviderIdentifierExpr
	(*ResourceExpr)(nil),           // 16: alchematik.athanor.blueprint.v1.ResourceExpr
	(*ResourceIdentifierExpr)(nil), // 17: alchematik.athanor.blueprint.v1.ResourceIdentifierExpr
	nil,                            // 18: alchematik.athanor.blueprint.v1.BuildStmt.InputsEntry
	nil,                            // 19: alchematik.athanor.blueprint.v1.MapExpr.EntriesEntry
}
var file_blueprint_v1_blueprint_proto_depIdxs = []int32{
	1,  // 0: alchematik.athanor.blueprint.v1.Blueprint.stmts:type_name -> alchematik.athanor.blueprint.v1.Stmt
	2,  // 1: alchematik.athanor.blueprint.v1.Stmt.provider:type_name -> alchematik.athanor.blueprint.v1.ProviderStmt
	3,  // 2: alchematik.athanor.blueprint.v1.Stmt.resource:type_name -> alchematik.athanor.blueprint.v1.ResourceStmt
	4,  // 3: alchematik.athanor.blueprint.v1.Stmt.build:type_name -> alchematik.athanor.blueprint.v1.BuildStmt
	5,  // 4: alchematik.athanor.blueprint.v1.ProviderStmt.expr:type_name -> alchematik.athanor.blueprint.v1.Expr
	5,  // 5: alchematik.athanor.blueprint.v1.ResourceStmt.expr:type_name -> alchematik.athanor.blueprint.v1.Expr
	18, // 6: alchematik.athanor.blueprint.v1.BuildStmt.inputs:type_name -> alchematik.athanor.blueprint.v1.BuildStmt.InputsEntry
	5,  // 7: alchematik.athanor.blueprint.v1.BuildStmt.blueprint:type_name -> alchematik.athanor.blueprint.v1.Expr
	7,  // 8: alchematik.athanor.blueprint.v1.Expr.list:type_name -> alchematik.athanor.blueprint.v1.ListExpr
	8,  // 9: alchematik.athanor.blueprint.v1.Expr.map:type_name -> alchematik.athanor.blueprint.v1.MapExpr
	9,  // 10: alchematik.athanor.blueprint.v1.Expr.get:type_name -> alchematik.athanor.blueprint.v1.GetExpr
	14, // 11: alchematik.athanor.blueprint.v1.Expr.provider:type_name -> alchematik.athanor.blueprint.v1.ProviderExpr
	16, // 12: alchematik.athanor.blueprint.v1.Expr.resource:type_name -> alchematik.athanor.blueprint.v1.ResourceExpr
	10, // 13: alchematik.athanor.blueprint.v1.Expr.get_provider:type_name -> alchematik.athanor.blueprint.v1.GetProviderExpr
	11, // 14: alchematik.athanor.blueprint.v1.Expr.get_resource:type_name -> alchematik.athanor.blueprint.v1.GetResourceExpr
	13, // 15: alchematik.athanor.blueprint.v1.Expr.nil:type_name -> alchematik.athanor.blueprint.v1.NilExpr
	12, // 16: alchematik.athanor.blueprint.v1.Expr.io_get:type_name -> alchematik.athanor.blueprint.v1.IOGetExpr
	15, // 17: alchematik.athanor.blueprint.v1.Expr.provider_identifier:type_name -> alchematik.athanor.blueprint.v1.ProviderIdentifierExpr
	17, // 18: alchematik.athanor.blueprint.v1.Expr.resource_identifier:type_name -> alchematik.athanor.blueprint.v1.ResourceIdentifierExpr
	6,  // 19: alchematik.athanor.blueprint.v1.Expr.blueprint:type_name -> alchematik.athanor.blueprint.v1.BlueprintExpr
	1,  // 20: alchematik.athanor.blueprint.v1.BlueprintExpr.stmts:type_name -> alchematik.athanor.blueprint.v1.Stmt
	5,  // 21: alchematik.athanor.blueprint.v1.ListExpr.elements:type_name -> alchematik.athanor.blueprint.v1.Expr
	19, // 22: alchematik.athanor.blueprint.v1.MapExpr.entries:type_name -> alchematik.athanor.blueprint.v1.MapExpr.EntriesEntry
	5,  // 23: alchematik.athanor.blueprint.v1.GetExpr.object:type_name -> alchematik.athanor.blueprint.v1.Expr
	5,  // 24: alchematik.athanor.blueprint.v1.IOGetExpr.object:type_name -> alchematik.athanor.blueprint.v1.Expr
	5,  // 25: alchematik.athanor.blueprint.v1.ProviderExpr.identifier:type_name -> alchematik.athanor.blueprint.v1.Expr
	5,  // 26: alchematik.athanor.blueprint.v1.ProviderIdentifierExpr.name:type_name -> alchematik.athanor.blueprint.v1.Expr
	5,  // 27: alchematik.athanor.blueprint.v1.ProviderIdentifierExpr.version:type_name -> alchematik.athanor.blueprint.v1.Expr
	5,  // 28: alchematik.athanor.blueprint.v1.ResourceExpr.provider:type_name -> alchematik.athanor.blueprint.v1.Expr
	5,  // 29: alchematik.athanor.blueprint.v1.ResourceExpr.identifier:type_name -> alchematik.athanor.blueprint.v1.Expr
	5,  // 30: alchematik.athanor.blueprint.v1.ResourceExpr.config:type_name -> alchematik.athanor.blueprint.v1.Expr
	5,  // 31: alchematik.athanor.blueprint.v1.ResourceExpr.exists:type_name -> alchematik.athanor.blueprint.v1.Expr
	5,  // 32: alchematik.athanor.blueprint.v1.ResourceIdentifierExpr.value:type_name -> alchematik.athanor.blueprint.v1.Expr
	5,  // 33: alchematik.athanor.blueprint.v1.BuildStmt.InputsEntry.value:type_name -> alchematik.athanor.blueprint.v1.Expr
	5,  // 34: alchematik.athanor.blueprint.v1.MapExpr.EntriesEntry.value:type_name -> alchematik.athanor.blueprint.v1.Expr
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_blueprint_v1_blueprint_proto_init() }
func file_blueprint_v1_blueprint_proto_init() {
	if File_blueprint_v1_blueprint_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blueprint_v1_blueprint_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blueprint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blueprint_v1_blueprint_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blueprint_v1_blueprint_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blueprint_v1_blueprint_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blueprint_v1_blueprint_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blueprint_v1_blueprint_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blueprint_v1_blueprint_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlueprintExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blueprint_v1_blueprint_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blueprint_v1_blueprint_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blueprint_v1_blueprint_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blueprint_v1_blueprint_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProviderExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blueprint_v1_blueprint_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blueprint_v1_blueprint_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IOGetExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blueprint_v1_blueprint_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NilExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blueprint_v1_blueprint_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blueprint_v1_blueprint_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderIdentifierExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blueprint_v1_blueprint_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blueprint_v1_blueprint_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceIdentifierExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_blueprint_v1_blueprint_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Stmt_Provider)(nil),
		(*Stmt_Resource)(nil),
		(*Stmt_Build)(nil),
	}
	file_blueprint_v1_blueprint_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Expr_StringLiteral)(nil),
		(*Expr_IntLiteral)(nil),
		(*Expr_FloatLiteral)(nil),
		(*Expr_BoolLiteral)(nil),
		(*Expr_List)(nil),
		(*Expr_Map)(nil),
		(*Expr_Get)(nil),
		(*Expr_Provider)(nil),
		(*Expr_Resource)(nil),
		(*Expr_GetProvider_)(nil),
		(*Expr_GetResource_)(nil),
		(*Expr_Nil)(nil),
		(*Expr_IoGet)(nil),
		(*Expr_ProviderIdentifier)(nil),
		(*Expr_ResourceIdentifier)(nil),
		(*Expr_Blueprint)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blueprint_v1_blueprint_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_blueprint_v1_blueprint_proto_goTypes,
		DependencyIndexes: file_blueprint_v1_blueprint_proto_depIdxs,
		MessageInfos:      file_blueprint_v1_blueprint_proto_msgTypes,
	}.Build()
	File_blueprint_v1_blueprint_proto = out.File
	file_blueprint_v1_blueprint_proto_rawDesc = nil
	file_blueprint_v1_blueprint_proto_goTypes = nil
	file_blueprint_v1_blueprint_proto_depIdxs = nil
}
