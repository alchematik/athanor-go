// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: translator/v1/translator.proto

package translatorv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Translator_TranslateProviderSchema_FullMethodName = "/alchematik.athanor.translator.v1.Translator/TranslateProviderSchema"
	Translator_TranslateBlueprint_FullMethodName      = "/alchematik.athanor.translator.v1.Translator/TranslateBlueprint"
	Translator_GenerateProviderSDK_FullMethodName     = "/alchematik.athanor.translator.v1.Translator/GenerateProviderSDK"
	Translator_GenerateConsumerSDK_FullMethodName     = "/alchematik.athanor.translator.v1.Translator/GenerateConsumerSDK"
)

// TranslatorClient is the client API for Translator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranslatorClient interface {
	TranslateProviderSchema(ctx context.Context, in *TranslateProviderSchemaRequest, opts ...grpc.CallOption) (*TranslateProviderSchemaResponse, error)
	TranslateBlueprint(ctx context.Context, in *TranslateBlueprintRequest, opts ...grpc.CallOption) (*TranslateBlueprintResponse, error)
	GenerateProviderSDK(ctx context.Context, in *GenerateProviderSDKRequest, opts ...grpc.CallOption) (*GenerateProvierSDKResponse, error)
	GenerateConsumerSDK(ctx context.Context, in *GenerateConsumerSDKRequest, opts ...grpc.CallOption) (*GenerateConsumerSDKResponse, error)
}

type translatorClient struct {
	cc grpc.ClientConnInterface
}

func NewTranslatorClient(cc grpc.ClientConnInterface) TranslatorClient {
	return &translatorClient{cc}
}

func (c *translatorClient) TranslateProviderSchema(ctx context.Context, in *TranslateProviderSchemaRequest, opts ...grpc.CallOption) (*TranslateProviderSchemaResponse, error) {
	out := new(TranslateProviderSchemaResponse)
	err := c.cc.Invoke(ctx, Translator_TranslateProviderSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translatorClient) TranslateBlueprint(ctx context.Context, in *TranslateBlueprintRequest, opts ...grpc.CallOption) (*TranslateBlueprintResponse, error) {
	out := new(TranslateBlueprintResponse)
	err := c.cc.Invoke(ctx, Translator_TranslateBlueprint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translatorClient) GenerateProviderSDK(ctx context.Context, in *GenerateProviderSDKRequest, opts ...grpc.CallOption) (*GenerateProvierSDKResponse, error) {
	out := new(GenerateProvierSDKResponse)
	err := c.cc.Invoke(ctx, Translator_GenerateProviderSDK_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translatorClient) GenerateConsumerSDK(ctx context.Context, in *GenerateConsumerSDKRequest, opts ...grpc.CallOption) (*GenerateConsumerSDKResponse, error) {
	out := new(GenerateConsumerSDKResponse)
	err := c.cc.Invoke(ctx, Translator_GenerateConsumerSDK_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranslatorServer is the server API for Translator service.
// All implementations should embed UnimplementedTranslatorServer
// for forward compatibility
type TranslatorServer interface {
	TranslateProviderSchema(context.Context, *TranslateProviderSchemaRequest) (*TranslateProviderSchemaResponse, error)
	TranslateBlueprint(context.Context, *TranslateBlueprintRequest) (*TranslateBlueprintResponse, error)
	GenerateProviderSDK(context.Context, *GenerateProviderSDKRequest) (*GenerateProvierSDKResponse, error)
	GenerateConsumerSDK(context.Context, *GenerateConsumerSDKRequest) (*GenerateConsumerSDKResponse, error)
}

// UnimplementedTranslatorServer should be embedded to have forward compatible implementations.
type UnimplementedTranslatorServer struct {
}

func (UnimplementedTranslatorServer) TranslateProviderSchema(context.Context, *TranslateProviderSchemaRequest) (*TranslateProviderSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateProviderSchema not implemented")
}
func (UnimplementedTranslatorServer) TranslateBlueprint(context.Context, *TranslateBlueprintRequest) (*TranslateBlueprintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateBlueprint not implemented")
}
func (UnimplementedTranslatorServer) GenerateProviderSDK(context.Context, *GenerateProviderSDKRequest) (*GenerateProvierSDKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateProviderSDK not implemented")
}
func (UnimplementedTranslatorServer) GenerateConsumerSDK(context.Context, *GenerateConsumerSDKRequest) (*GenerateConsumerSDKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateConsumerSDK not implemented")
}

// UnsafeTranslatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranslatorServer will
// result in compilation errors.
type UnsafeTranslatorServer interface {
	mustEmbedUnimplementedTranslatorServer()
}

func RegisterTranslatorServer(s grpc.ServiceRegistrar, srv TranslatorServer) {
	s.RegisterService(&Translator_ServiceDesc, srv)
}

func _Translator_TranslateProviderSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateProviderSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorServer).TranslateProviderSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Translator_TranslateProviderSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorServer).TranslateProviderSchema(ctx, req.(*TranslateProviderSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translator_TranslateBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateBlueprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorServer).TranslateBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Translator_TranslateBlueprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorServer).TranslateBlueprint(ctx, req.(*TranslateBlueprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translator_GenerateProviderSDK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateProviderSDKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorServer).GenerateProviderSDK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Translator_GenerateProviderSDK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorServer).GenerateProviderSDK(ctx, req.(*GenerateProviderSDKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translator_GenerateConsumerSDK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateConsumerSDKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorServer).GenerateConsumerSDK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Translator_GenerateConsumerSDK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorServer).GenerateConsumerSDK(ctx, req.(*GenerateConsumerSDKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Translator_ServiceDesc is the grpc.ServiceDesc for Translator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Translator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alchematik.athanor.translator.v1.Translator",
	HandlerType: (*TranslatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TranslateProviderSchema",
			Handler:    _Translator_TranslateProviderSchema_Handler,
		},
		{
			MethodName: "TranslateBlueprint",
			Handler:    _Translator_TranslateBlueprint_Handler,
		},
		{
			MethodName: "GenerateProviderSDK",
			Handler:    _Translator_GenerateProviderSDK_Handler,
		},
		{
			MethodName: "GenerateConsumerSDK",
			Handler:    _Translator_GenerateConsumerSDK_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "translator/v1/translator.proto",
}
