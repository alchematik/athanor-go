// Code generated by athanor-go.
// DO NOT EDIT.

package bucket

import (
	"context"
	"fmt"

	sdk "github.com/alchematik/athanor-go/sdk/provider/value"
)

type Bucket struct {
	Identifier BucketIdentifier
	Config     BucketConfig
	Attrs      BucketAttrs
}

func (x Bucket) ToResourceValue() (sdk.Resource, error) {
	id, err := x.Identifier.ToValue()
	if err != nil {
		return sdk.Resource{}, nil
	}

	config, err := x.Config.ToValue()
	if err != nil {
		return sdk.Resource{}, nil
	}

	attrs, err := x.Attrs.ToValue()
	if err != nil {
		return sdk.Resource{}, nil
	}

	return sdk.Resource{
		Identifier: id,
		Config:     config,
		Attrs:      attrs,
	}, nil
}

type BucketGetter interface {
	GetBucket(context.Context, BucketIdentifier) (Bucket, error)
}

type BucketCreator interface {
	CreateBucket(context.Context, BucketIdentifier, BucketConfig) (Bucket, error)
}

type BucketUpdator interface {
	UpdateBucket(context.Context, BucketIdentifier, BucketConfig, []sdk.UpdateMaskField) (Bucket, error)
}

type BucketDeleter interface {
	DeleteBucket(context.Context, BucketIdentifier) error
}

type BucketHandler struct {
	BucketGetter  BucketGetter
	BucketCreator BucketCreator
	BucketUpdator BucketUpdator
	BucketDeleter BucketDeleter
}

func (h BucketHandler) GetResource(ctx context.Context, id sdk.Identifier) (sdk.Resource, error) {
	if h.BucketGetter == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := ParseBucketIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.BucketGetter.GetBucket(ctx, idVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h BucketHandler) CreateResource(ctx context.Context, id sdk.Identifier, config any) (sdk.Resource, error) {
	if h.BucketCreator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := ParseBucketIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseBucketConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.BucketCreator.CreateBucket(ctx, idVal, configVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h BucketHandler) UpdateResource(ctx context.Context, id sdk.Identifier, config any, mask []sdk.UpdateMaskField) (sdk.Resource, error) {
	if h.BucketUpdator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := ParseBucketIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseBucketConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.BucketUpdator.UpdateBucket(ctx, idVal, configVal, mask)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h BucketHandler) DeleteResource(ctx context.Context, id sdk.Identifier) error {
	if h.BucketDeleter == nil {
		return fmt.Errorf("unimplemented")
	}

	idVal, err := ParseBucketIdentifier(id)
	if err != nil {
		return err
	}

	return h.BucketDeleter.DeleteBucket(ctx, idVal)
}

type Bar struct {
	Foo string
}

func (x Bar) ToValue() (any, error) {
	return map[string]any{
		"foo": x.Foo,
	}, nil
}

func ParseBar(v any) (Bar, error) {

	m, err := sdk.Map(v)
	if err != nil {
		return Bar{}, nil
	}

	foo, err := sdk.String(m["foo"])
	if err != nil {
		return Bar{}, nil
	}

	return Bar{
		Foo: foo,
	}, nil
}

type BucketAttrs struct {
	Bar Bar
}

func (x BucketAttrs) ToValue() (any, error) {
	return map[string]any{
		"bar": x.Bar,
	}, nil
}

func ParseBucketAttrs(v any) (BucketAttrs, error) {

	m, err := sdk.Map(v)
	if err != nil {
		return BucketAttrs{}, nil
	}

	bar, err := ParseBar(m["bar"])
	if err != nil {
		return BucketAttrs{}, nil
	}

	return BucketAttrs{
		Bar: bar,
	}, nil
}

type BucketConfig struct {
	Expiration string
}

func (x BucketConfig) ToValue() (any, error) {
	return map[string]any{
		"expiration": x.Expiration,
	}, nil
}

func ParseBucketConfig(v any) (BucketConfig, error) {

	m, err := sdk.Map(v)
	if err != nil {
		return BucketConfig{}, nil
	}

	expiration, err := sdk.String(m["expiration"])
	if err != nil {
		return BucketConfig{}, nil
	}

	return BucketConfig{
		Expiration: expiration,
	}, nil
}

type BucketIdentifier struct {
	Account string
	Region  string
	Name    string
}

func (x BucketIdentifier) ToValue() (any, error) {
	return sdk.Identifier{
		ResourceType: "bucket",
		Value: map[string]any{
			"account": x.Account,
			"region":  x.Region,
			"name":    x.Name,
		},
	}, nil
}

func (x BucketIdentifier) ResourceType() string {
	return "bucket"
}

func ParseBucketIdentifier(v sdk.Identifier) (BucketIdentifier, error) {

	m, err := sdk.Map(v.Value)
	if err != nil {
		return BucketIdentifier{}, nil
	}

	account, err := sdk.String(m["account"])
	if err != nil {
		return BucketIdentifier{}, nil
	}
	region, err := sdk.String(m["region"])
	if err != nil {
		return BucketIdentifier{}, nil
	}
	name, err := sdk.String(m["name"])
	if err != nil {
		return BucketIdentifier{}, nil
	}

	return BucketIdentifier{
		Account: account,
		Region:  region,
		Name:    name,
	}, nil
}
